#pragma checksum "C:\Users\Admin\Git\Safety\VK1.SCGE.Safety.Mvc\Views\DashboardYearly\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "677bdc0ea5d0be8c59a344203513734024c56e88"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_DashboardYearly_Index), @"mvc.1.0.view", @"/Views/DashboardYearly/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Admin\Git\Safety\VK1.SCGE.Safety.Mvc\Views\_ViewImports.cshtml"
using VK1.SCGE.Safety.Mvc;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Admin\Git\Safety\VK1.SCGE.Safety.Mvc\Views\_ViewImports.cshtml"
using VK1.SCGE.Safety.Mvc.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Admin\Git\Safety\VK1.SCGE.Safety.Mvc\Views\_ViewImports.cshtml"
using VK1.SCGE.Safety.Mvc.Dtos;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Admin\Git\Safety\VK1.SCGE.Safety.Mvc\Views\_ViewImports.cshtml"
using VK1.SCGE.Safety.Mvc.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Admin\Git\Safety\VK1.SCGE.Safety.Mvc\Views\_ViewImports.cshtml"
using VK1.SCGE.Safety.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Admin\Git\Safety\VK1.SCGE.Safety.Mvc\Views\_ViewImports.cshtml"
using VK1.SCGE.Safety.Models.ViewModels;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Admin\Git\Safety\VK1.SCGE.Safety.Mvc\Views\_ViewImports.cshtml"
using VK1.SCGE.Safety.Mvc.Models.ReportViewModels;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Admin\Git\Safety\VK1.SCGE.Safety.Mvc\Views\_ViewImports.cshtml"
using VK1.SCGE.Safety.Mvc.Models.ManageViewModels;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Admin\Git\Safety\VK1.SCGE.Safety.Mvc\Views\_ViewImports.cshtml"
using VK1.SCGE.Safety.Services;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"677bdc0ea5d0be8c59a344203513734024c56e88", @"/Views/DashboardYearly/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ad089ff6942dee7852c6438a678bc9b30921c910", @"/Views/_ViewImports.cshtml")]
    public class Views_DashboardYearly_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("name", "pv_Filter", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("name", "pv_CaseType", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("name", "pv_Rank", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/jquery.periodpicker.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "C:\Users\Admin\Git\Safety\VK1.SCGE.Safety.Mvc\Views\DashboardYearly\Index.cshtml"
  
    ViewData["Title"] = "IndexDashBoardYear";

#line default
#line hidden
#nullable disable
            WriteLiteral("<div>\r\n    <div class=\"row pt-2\">\r\n        <span style=\"font-size:14px;font-weight:bold\" class=\"mx-3\">Dashboard ภาพรวมรายปี</span>\r\n        <span class=\"text-muted\"><i class=\"fa fa-filter\"></i> ค้นหาโดย </span>\r\n    </div>\r\n    <div class=\"row\">\r\n        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("partial", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "677bdc0ea5d0be8c59a344203513734024c56e886746", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper.Name = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
        <div style=""border-bottom:1px solid black;height:1px;width:100%""></div>
    </div>
</div>
<div id=""yearlyDashboard"">
    <div class=""d-flex justify-content-between mt-2"">
        <div class=""card"" style=""width:255px;height:282.67px"">
            <div class=""card-body pb-0"">
                <div id=""dataCasetype"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("partial", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "677bdc0ea5d0be8c59a344203513734024c56e888226", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper.Name = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </div>
            </div>
        </div>
        <div class=""card"" style=""width:255px;height:282.67px"">
            <div class=""card-body pb-0"">
                <div id=""chart2""></div>
            </div>
        </div>
        <div class=""card"" style=""width:255px;height:282.67px"">
            <div class=""card-body pb-0"">
                <div id=""chart1""></div>
            </div>
        </div>
        <div class=""card"" style=""width:255px;height:282.67px"">
            <div class=""card-body pb-0"">
                <div id=""dataRank"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("partial", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "677bdc0ea5d0be8c59a344203513734024c56e889954", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper.Name = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </div>
            </div>
        </div>

    </div>

    <div class=""d-flex justify-content-between mt-2"">
        <div class=""card mr-1 px-2"">
            <div class=""card-body px-0"">
                <div id=""chart3""></div>
            </div>
        </div>
        <div class=""card mr-1"">
            <div class=""card-body"">
                <div id=""chart4""></div>
                <div id=""chart5""></div>
                <div id=""table_div""></div>
            </div>
        </div>
        <div class=""card"">
            <div class=""card-body"">
                <div id=""chart6""></div>
                <div id=""chart7""></div>
                <div id=""table_div2""></div>
            </div>
        </div>

    </div>

</div>
");
            DefineSection("Styles", async() => {
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "677bdc0ea5d0be8c59a344203513734024c56e8811966", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
    <link href=""https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css"" rel=""stylesheet"" />

    <style>
        .small-font {
            font-size: 9px;
            height: 10px;
        }

        .header-font {
            font-size: 9px;
        }
    </style>
");
            }
            );
            WriteLiteral("\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n    <script src=\"https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js\"></script>\r\n    <script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>\r\n\r\n\r\n");
#nullable restore
#line 89 "C:\Users\Admin\Git\Safety\VK1.SCGE.Safety.Mvc\Views\DashboardYearly\Index.cshtml"
      await Html.RenderPartialAsync("_ValidationScriptsPartial");

#line default
#line hidden
#nullable disable
                WriteLiteral(@"
    <script>

        // Load the Visualization API and the corechart package.
        google.charts.load('current', { 'packages': ['corechart'] });
        google.charts.load('current', { 'packages': ['table'] });

        // globar variable for hold chart data
        let vehiclePiechartData;
        let accidentModePiechartData;
        let incidentPiechartData;
        let monthlyTransportScg;
        let monthlyTransportCarrier;
        let dataRowTransport;
        let monthlyOtherScg;
        let monthlyOtherCarrier;
        let dataRowOther;
        let titleYear;
        let subtitle;


        $(document).ready(function () {
            $('.js-example-basic-single').select2({});
            $('#yearlyDashboard').hide();
        })

        //1
        $('#ddlRegion').on('change', () => {
            const region = $('#ddlRegion').val();
            const url = `/AccidentReports/GetBranch/${region}`;
            $.get(url).then(res => {
                $('#ddlBranch').");
                WriteLiteral(@"empty();
                $('#ddlBranch').append('<option value="""" selected>ทั้งหมด</option>')
                res.forEach((x) => {
                    $('#ddlBranch').append('<option value=""' + x.id + '"">' + x.name + '</option>')
                });

            })
        });

        //2
        $('#btnSearch').click(() => {
            const year = $('#ddlYear').val();
            const region = $('#ddlRegion').val();
            const branch = $('#ddlBranch').val();

            //call function
            fnSummaryCaseType(year, region, branch);
            fnPiechartVehicle(year, region, branch);
            fnSummaryByRank(year, region, branch);
            fnSummaryByAccidentMode(year, region, branch);
            fnSummaryByIncident(year, region, branch);
            // fnTableChart();
            fnMontlyTransportScg(year, region, branch);
            fnMontlyTransportCarrier(year, region, branch);
            fnSummaryByTransport(year, region, branch);
            fnMontlyO");
                WriteLiteral(@"therScg(year, region, branch);
            fnMontlyOtherCarrier(year, region, branch);
            fnSummaryByOther(year, region, branch);

            $('#yearlyDashboard').show();
        })

        function fnSummaryCaseType(year, region, branch) {

            $('#btnSearch').html('<span class=""spinner-border spinner-border-sm mr-2"" role=""status"" aria-hidden=""true""></span>Loading...').addClass('disabled');
            const url = `/DashboardYearly/SummaryByCaseType?year=${year}&regionId=${region}&branchCode=${branch}`;
            $.get(url).then(res => {
                $('#dataCasetype').html(res);
            })
        }

        function fnPiechartVehicle(year, region, branch) {
            const url = `/DashboardYearly/SummaryByVehicleType?year=${year}&regionId=${region}&branchCode=${branch}`;
            $.get(url).then(res => {
                vehiclePiechartData = res.chartdata;
                titleYear = res.year;
                if (res.branchCode === null && res.region =");
                WriteLiteral(@"== null) {
                    subtitle = '-' + res.branchCode;
                } else if (res.branchCode === null && res.region === null) {
                    subtitle = '';
                } else if (res.branchCode !== null && res.region === null) {
                    subtitle = '-' + res.branchCode;
                } else if (res.branchCode === null && res.region !== null) {
                    subtitle = '-' + res.region;
                } else if (res.branchCode !== null && res.region !== null) {
                    subtitle = '-' + res.branchCode;
                }

            }).done(function () {
                google.setOnLoadCallback(drawChart);
                function drawChart() {
                    var data = google.visualization.arrayToDataTable(vehiclePiechartData);
                    var view = new google.visualization.DataView(data);
                    subtitle = subtitle === '-null' ? '' : subtitle;
                    var options = {
                        title:");
                WriteLiteral(@" `ประเภทของรถที่เกิดอุบัติเหตุปี ${titleYear}${subtitle}`,
                        titleTextStyle: { fontSize: 11 },
                        width: 230, height: 200,
                        chartArea: { width: '80%', height: '75%', left: 10, top: 30 },
                        legend: {
                            position: 'bottom', textStyle: { fontSize: 12 }
                        },
                        colors: ['#4B515D', '#1C2331'],
                        pieSliceText: 'value-and-percentage',
                        //pieSliceText: 'percentage',
                        fontSize: 14,
                    };

                    var chart = new google.visualization.PieChart(document.getElementById('chart1'));

                    chart.draw(view, options);
                }
            });
        }

        function fnSummaryByRank(year, region, branch) {
            const url = `/DashboardYearly/SummaryByRank?year=${year}&regionId=${region}&branchCode=${branch}`;
            $.g");
                WriteLiteral(@"et(url).then(res => {
                $('#dataRank').html(res);
            })
        }

        function fnSummaryByAccidentMode(year, region, branch) {
            const url = `/DashboardYearly/SummaryByAccidentMode?year=${year}&regionId=${region}&branchCode=${branch}`;
            $.get(url).then(res => {
                accidentModePiechartData = res.chartdata;
                titleYear = res.year;
                if (res.branchCode === null && res.region === null) {
                    subtitle = '-' + res.branchCode;
                } else if (res.branchCode === null && res.region === null) {
                    subtitle = '';
                } else if (res.branchCode !== null && res.region === null) {
                    subtitle = '-' + res.branchCode;
                } else if (res.branchCode === null && res.region !== null) {
                    subtitle = '-' + res.region;
                } else if (res.branchCode !== null && res.region !== null) {
                    subtitle =");
                WriteLiteral(@" '-' + res.branchCode;
                }
            }).done(function () {
                google.setOnLoadCallback(drawChart);
                function drawChart() {
                    var data = google.visualization.arrayToDataTable(accidentModePiechartData);
                    var view = new google.visualization.DataView(data);
                    subtitle = subtitle === '-null' ? '' : subtitle;
                    var options = {
                        title: `ประเภทอุบัติเหตุปี ${titleYear}${subtitle}`,
                        titleTextStyle: { fontSize: 12 },
                        width: 230, height: 220,
                        chartArea: { width: '80%', height: '75%', left: 10, top: 30 },
                        legend: {
                            position: 'bottom', textStyle: { fontSize: 12 }
                        },
                        colors: ['#2BBBAD', '#4285F4'],
                        pieSliceText: 'value-and-percentage',
                        //pieSliceText: ");
                WriteLiteral(@"'percentage',
                        fontSize: 14,
                    };

                    var chart = new google.visualization.PieChart(document.getElementById('chart2'));

                    chart.draw(view, options);
                }
            });
        }

        function fnSummaryByIncident(year, region, branch) {
            const url = `/DashboardYearly/SummaryByIncident?year=${year}&regionId=${region}&branchCode=${branch}`;
            $.get(url).then(res => {
                incidentPiechartData = res.chartdata;
                titleYear = res.year;
                if (res.branchCode === null && res.region === null) {
                    subtitle = '-' + res.branchCode;
                } else if (res.branchCode === null && res.region === null) {
                    subtitle = '';
                } else if (res.branchCode !== null && res.region === null) {
                    subtitle = '-' + res.branchCode;
                } else if (res.branchCode === null && res.reg");
                WriteLiteral(@"ion !== null) {
                    subtitle = '-' + res.region;
                } else if (res.branchCode !== null && res.region !== null) {
                    subtitle = '-' + res.branchCode;
                }
            }).done(function () {
                google.setOnLoadCallback(drawChart);
                function drawChart() {
                    var data = google.visualization.arrayToDataTable(incidentPiechartData);
                    var view = new google.visualization.DataView(data);
                    subtitle = subtitle === '-null' ? '' : subtitle;
                    var options = {
                        title: `ลักษณะของอุบัติเหตุที่เกิด ${titleYear}${subtitle}`,
                        titleTextStyle: { fontSize: 15 },
                        width: 420, height: 350,
                        chartArea: { width: '100%', height: '75%', left: 10, top: 50, right: 10 },
                        legend: {
                            position: 'labeled', textStyle: { fontSize: 12");
                WriteLiteral(@" }
                        },
                        pieSliceText: 'value-and-percentage',
                        is3D: true,
                        fontSize: 14,
                    };

                    var chart = new google.visualization.PieChart(document.getElementById('chart3'));

                    chart.draw(view, options);
                }
            });
        }

        function fnMontlyTransportScg(year, region, branch) {
            const url = `/DashboardYearly/MonthlyTransportScg?year=${year}&regionId=${region}&branchCode=${branch}`;

            $.get(url).then(res => {
                monthlyTransportScg = res.chartData;
                titleYear = res.year;
                if (res.branchCode === null && res.region === null) {
                    subtitle = '-' + res.branchCode;
                } else if (res.branchCode === null && res.region === null) {
                    subtitle = '';
                } else if (res.branchCode !== null && res.region === nul");
                WriteLiteral(@"l) {
                    subtitle = '-' + res.branchCode;
                } else if (res.branchCode === null && res.region !== null) {
                    subtitle = '-' + res.region;
                } else if (res.branchCode !== null && res.region !== null) {
                    subtitle = '-' + res.branchCode;
                }
            }).done(function () {
                google.setOnLoadCallback(drawChart);
                function drawChart() {
                    var data = google.visualization.arrayToDataTable(monthlyTransportScg);
                    var view = new google.visualization.DataView(data);
                    view.setColumns([0, 1,
                        {
                            calc: ""stringify"",
                            sourceColumn: 1,
                            type: ""string"",
                            role: ""annotation""
                        },
                        2, {
                            calc: ""stringify"",
                           ");
                WriteLiteral(@" sourceColumn: 2,
                            type: ""string"",
                            role: ""annotation""
                        },

                    ]);

                    subtitle = subtitle === '-null' ? '' : subtitle;
                    var options = {
                        title: `สถิติอุบัติเหตุปี${titleYear} Transport${subtitle} - รถบริษัทฯ`,
                        titleTextStyle: { fontSize: 11 },
                        isStacked: true,
                        width: 300,
                        height: 200,
                        legend: { position: 'top', maxLines: 3 },
                        vAxis: { minValue: 0 },
                        annotations: {
                            textStyle: {
                                fontName: 'Times-Roman',
                                fontSize: 10,
                                bold: false,
                                italic: false,
                                // The color of the text.
                  ");
                WriteLiteral(@"              color: '#871b47',
                                // The color of the text outline.
                                //auraColor: '#d799ae',
                                // The transparency of the text.
                                //opacity: 0.8
                            }
                        },
                        chartArea: {
                            left: 30,
                            width: '100%',
                        }
                    };

                    options.colors = [""#007E33"", ""#ff4444""];

                    var barChart = new google.visualization.ColumnChart(document.getElementById('chart4'));
                    barChart.draw(view, options);

                }

            });
        }

        function fnMontlyTransportCarrier(year, region, branch) {
            const url = `/DashboardYearly/MonthlyTransportCarrier?year=${year}&regionId=${region}&branchCode=${branch}`;

            $.get(url).then(res => {
              ");
                WriteLiteral(@"  monthlyTransportCarrier = res.chartData;
                titleYear = res.year;
                if (res.branchCode === null && res.region === null) {
                    subtitle = '-' + res.branchCode;
                } else if (res.branchCode === null && res.region === null) {
                    subtitle = '';
                } else if (res.branchCode !== null && res.region === null) {
                    subtitle = '-' + res.branchCode;
                } else if (res.branchCode === null && res.region !== null) {
                    subtitle = '-' + res.region;
                } else if (res.branchCode !== null && res.region !== null) {
                    subtitle = '-' + res.branchCode;
                }
            }).done(function () {
                google.setOnLoadCallback(drawChart);
                function drawChart() {
                    var data = google.visualization.arrayToDataTable(monthlyTransportCarrier);
                    var view = new google.visualization.DataView(d");
                WriteLiteral(@"ata);
                    view.setColumns([0, 1,
                        {
                            calc: ""stringify"",
                            sourceColumn: 1,
                            type: ""string"",
                            role: ""annotation""
                        },
                        2, {
                            calc: ""stringify"",
                            sourceColumn: 2,
                            type: ""string"",
                            role: ""annotation""
                        },

                    ]);

                    subtitle = subtitle === '-null' ? '' : subtitle;
                    var options = {
                        title: `สถิติอุบัติเหตุปี${titleYear} Transport${subtitle} - รถผู้รับเหมา`,
                        titleTextStyle: { fontSize: 11 },
                        isStacked: true,
                        width: 300,
                        height: 200,
                        legend: { position: 'top', maxLines: 3 },
      ");
                WriteLiteral(@"                  vAxis: { minValue: 0 },
                        annotations: {
                            textStyle: {
                                fontName: 'Times-Roman',
                                fontSize: 10,
                                bold: false,
                                italic: false,
                                // The color of the text.
                                color: '#871b47',
                                // The color of the text outline.
                                //auraColor: '#d799ae',
                                // The transparency of the text.
                                //opacity: 0.8
                            }
                        },
                        chartArea: {
                            left: 30,
                            width: '100%',
                        }
                    };

                    options.colors = [""#007E33"", ""#ff4444""];

                    var barChart = new google.visualiza");
                WriteLiteral(@"tion.ColumnChart(document.getElementById('chart5'));
                    barChart.draw(view, options);

                }

            });
        }

        function fnSummaryByTransport(year, region, branch) {

            const url = `/DashboardYearly/SummaryByTransport?year=${year}&regionId=${region}&branchCode=${branch}`;

            $.get(url).then(res => {
                dataRowTransport = res;
                console.log(res);
            }).done(function () {
                google.charts.setOnLoadCallback(drawTable);
                function drawTable() {
                    var data = new google.visualization.DataTable();
                    data.addColumn('string', '');
                    data.addColumn('number', 'Jan');
                    data.addColumn('number', 'Feb');
                    data.addColumn('number', 'Mar');
                    data.addColumn('number', 'Apr');
                    data.addColumn('number', 'May');
                    data.addColumn('numbe");
                WriteLiteral(@"r', 'Jun');
                    data.addColumn('number', 'Jul');
                    data.addColumn('number', 'Aug');
                    data.addColumn('number', 'Sep');
                    data.addColumn('number', 'Aug');
                    data.addColumn('number', 'Nov');
                    data.addColumn('number', 'Dec');

                    data.addRows(dataRowTransport);


                    //var cssClassNames = {
                    //    'headerRow': 'italic-darkblue-font large-font bold-font',
                    //    'tableRow': '',
                    //    'oddTableRow': 'beige-background',
                    //    'selectedTableRow': 'orange-background large-font',
                    //    'hoverTableRow': '',
                    //    'headerCell': 'gold-border',
                    //    'tableCell': '',
                    //    'rowNumberCell': 'underline-blue-font'
                    //};

                    var options = {
                        allowHtml: ");
                WriteLiteral(@"true,
                        cssClassNames: {
                            headerCell: 'header-font',
                            tableCell: 'small-font'
                        },
                        width: '100%',
                        height: '100%',
                    };


                    var table = new google.visualization.Table(document.getElementById('table_div'));
                    table.draw(data, options);
                }

            })
        }

        function fnMontlyOtherScg(year, region, branch) {
            const url = `/DashboardYearly/MonthlyOtherScg?year=${year}&regionId=${region}&branchCode=${branch}`;

            $.get(url).then(res => {
                monthlyOtherScg = res.chartData;
                titleYear = res.year;
                if (res.branchCode === null && res.region === null) {
                    subtitle = '-' + res.branchCode;
                } else if (res.branchCode === null && res.region === null) {
                    sub");
                WriteLiteral(@"title = '';
                } else if (res.branchCode !== null && res.region === null) {
                    subtitle = '-' + res.branchCode;
                } else if (res.branchCode === null && res.region !== null) {
                    subtitle = '-' + res.region;
                } else if (res.branchCode !== null && res.region !== null) {
                    subtitle = '-' + res.branchCode;
                }

            }).done(function () {
                google.setOnLoadCallback(drawChart);
                function drawChart() {
                    var data = google.visualization.arrayToDataTable(monthlyOtherScg);
                    var view = new google.visualization.DataView(data);
                    view.setColumns([0, 1,
                        {
                            calc: ""stringify"",
                            sourceColumn: 1,
                            type: ""string"",
                            role: ""annotation""
                        },
                      ");
                WriteLiteral(@"  2, {
                            calc: ""stringify"",
                            sourceColumn: 2,
                            type: ""string"",
                            role: ""annotation""
                        },

                    ]);

                    subtitle = subtitle === '-null' ? '' : subtitle;
                    var options = {
                        title: `สถิติอุบัติเหตุปี${titleYear} Other${subtitle} - รถบริษัทฯ `,
                        titleTextStyle: { fontSize: 11 },
                        isStacked: true,
                        width: 300,
                        height: 200,
                        legend: { position: 'top', maxLines: 3 },
                        vAxis: {
                            minValue: 0,
                            viewWindow: {
                                min: 0
                            }
                        },
                        annotations: {
                            textStyle: {
                           ");
                WriteLiteral(@"     fontName: 'Times-Roman',
                                fontSize: 10,
                                bold: false,
                                italic: false,
                                // The color of the text.
                                color: '#871b47',
                                // The color of the text outline.
                                //auraColor: '#d799ae',
                                // The transparency of the text.
                                //opacity: 0.8
                            }
                        },
                        chartArea: {
                            left: 30,
                            width: '100%',
                        }
                    };

                    options.colors = [""#007E33"", ""#ff4444""];

                    var barChart = new google.visualization.ColumnChart(document.getElementById('chart6'));
                    barChart.draw(view, options);

                }

            });
       ");
                WriteLiteral(@" }

        function fnMontlyOtherCarrier(year, region, branch) {
            const url = `/DashboardYearly/MonthlyOtherCarrier?year=${year}&regionId=${region}&branchCode=${branch}`;

            $.get(url).then(res => {
                monthlyOtherCarrier = res.chartData;
                titleYear = res.year;
                if (res.branchCode === null && res.region === null) {
                    subtitle = '-' + res.branchCode;
                } else if (res.branchCode === null && res.region === null) {
                    subtitle = '';
                } else if (res.branchCode !== null && res.region === null) {
                    subtitle = '-' + res.branchCode;
                } else if (res.branchCode === null && res.region !== null) {
                    subtitle = '-' + res.region;
                } else if (res.branchCode !== null && res.region !== null) {
                    subtitle = '-' + res.branchCode;
                }
            }).done(function () {
                goo");
                WriteLiteral(@"gle.setOnLoadCallback(drawChart);
                function drawChart() {
                    var data = google.visualization.arrayToDataTable(monthlyOtherCarrier);
                    var view = new google.visualization.DataView(data);
                    view.setColumns([0, 1,
                        {
                            calc: ""stringify"",
                            sourceColumn: 1,
                            type: ""string"",
                            role: ""annotation""
                        },
                        2, {
                            calc: ""stringify"",
                            sourceColumn: 2,
                            type: ""string"",
                            role: ""annotation""
                        },

                    ]);

                    subtitle = subtitle === '-null' ? '' : subtitle;
                    var options = {
                        title: `สถิติอุบัติเหตุปี${titleYear} Other${subtitle} - รถผู้รับเหมา `,
                   ");
                WriteLiteral(@"     titleTextStyle: { fontSize: 11 },
                        isStacked: true,
                        width: 300,
                        height: 200,
                        legend: { position: 'top', maxLines: 3 },
                        vAxis: { viewWindow: { min: 0 }, viewWindowMode: ""explicit"" },
                        annotations: {
                            textStyle: {
                                fontName: 'Times-Roman',
                                fontSize: 10,
                                bold: false,
                                italic: false,
                                // The color of the text.
                                color: '#871b47',
                                // The color of the text outline.
                                //auraColor: '#d799ae',
                                // The transparency of the text.
                                //opacity: 0.8
                            }
                        },
                        ");
                WriteLiteral(@"chartArea: {
                            left: 30,
                            width: '100%',
                        }
                    };

                    options.colors = [""#007E33"", ""#ff4444""];

                    var barChart = new google.visualization.ColumnChart(document.getElementById('chart7'));
                    barChart.draw(view, options);

                }

            });
        }

        function fnSummaryByOther(year, region, branch) {

            const url = `/DashboardYearly/SummaryByOther?year=${year}&regionId=${region}&branchCode=${branch}`;

            $.get(url).then(res => {

                $('#btnSearch').html('Search')
                    .removeClass('disabled')
                    .addClass('btn btn-outline-cyan');

                dataRowOther = res;
                console.log(res);

            }).done(function () {
                google.charts.setOnLoadCallback(drawTable);
                function drawTable() {
                   ");
                WriteLiteral(@" var data = new google.visualization.DataTable();
                    data.addColumn('string', '');
                    data.addColumn('number', 'Jan');
                    data.addColumn('number', 'Feb');
                    data.addColumn('number', 'Mar');
                    data.addColumn('number', 'Apr');
                    data.addColumn('number', 'May');
                    data.addColumn('number', 'Jun');
                    data.addColumn('number', 'Jul');
                    data.addColumn('number', 'Aug');
                    data.addColumn('number', 'Sep');
                    data.addColumn('number', 'Aug');
                    data.addColumn('number', 'Nov');
                    data.addColumn('number', 'Dec');

                    data.addRows(dataRowOther);


                    //var cssClassNames = {
                    //    'headerRow': 'italic-darkblue-font large-font bold-font',
                    //    'tableRow': '',
                    //    'oddTableRow': 'beig");
                WriteLiteral(@"e-background',
                    //    'selectedTableRow': 'orange-background large-font',
                    //    'hoverTableRow': '',
                    //    'headerCell': 'gold-border',
                    //    'tableCell': '',
                    //    'rowNumberCell': 'underline-blue-font'
                    //};

                    var options = {
                        allowHtml: true,
                        cssClassNames: {
                            headerCell: 'header-font',
                            tableCell: 'small-font'
                        },
                        width: '100%',
                        height: '100%',
                    };


                    var table = new google.visualization.Table(document.getElementById('table_div2'));
                    table.draw(data, options);
                }

            })
        }

    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
